{"version":3,"sources":["firebase.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","App","props","saveToDB","e","preventDefault","fire","firestore","collection","add","dir","state","frametype","ipsrc","ipdest","iptype","srcport","destport","retrieveFromDB","populateDB","db","forEach","packet","deleteDB","delete","packets","handleDir","bind","handleFrameType","handleIPSrc","handleIPDest","handleIPType","handleSRCPort","handleDestPort","this","setState","target","value","get","then","data","doc","push","map","Dropdown","Item","href","table","ipsrcComponent","Form","Group","controlId","Label","Control","type","onChange","placeholder","ipdestComponent","srcportComponent","destportComponent","Container","Row","Col","Button","style","margin","variant","onClick","className","as","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ca0d6a54.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\r\nimport 'firebase/firestore'\r\n\r\nvar fireBaseConfig = {\r\n    apiKey: \"AIzaSyCC3-QPnNk7v6JdG3eqeUAOUm6gxew-H8M\",\r\n    authDomain: \"final-35789.firebaseapp.com\",\r\n    databaseURL: \"https://final-35789.firebaseio.com\",\r\n    projectId: \"final-35789\",\r\n    storageBucket: \"final-35789.appspot.com\",\r\n    messagingSenderId: \"224357659092\",\r\n    appId: \"1:224357659092:web:79a7f45a375bec844fe641\",\r\n    measurementId: \"G-EPP4NKZ92P\"\r\n}\r\n\r\nfirebase.initializeApp(fireBaseConfig);\r\n\r\nexport default firebase;","import React from 'react';\nimport {Form, Button, Container, Row, Col, DropdownButton, Dropdown} from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport fire from './firebase';\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = ({\n      dir: \"in\",\n      frametype: \"\",\n      ipsrc: \"\",\n      ipdest: \"\",\n      iptype: \"TCP\",\n      srcport: \"\",\n      destport: \"\",\n      packets: []\n    })\n    this.handleDir = this.handleDir.bind(this);\n    this.handleFrameType = this.handleFrameType.bind(this);\n    this.handleIPSrc = this.handleIPSrc.bind(this);\n    this.handleIPDest = this.handleIPDest.bind(this);\n    this.handleIPType = this.handleIPType.bind(this);\n    this.handleSRCPort = this.handleSRCPort.bind(this);\n    this.handleDestPort = this.handleDestPort.bind(this);\n    this.saveToDB = this.saveToDB.bind(this);\n    this.retrieveFromDB = this.retrieveFromDB.bind(this);\n    this.populateDB = this.populateDB.bind(this);\n    this.deleteDB = this.deleteDB.bind(this);\n  }\n\n  handleDir(e) {\n    this.setState({\n      dir: e.target.value\n    })\n  }\n\n  handleFrameType(e) {\n    this.setState({\n      frametype: e.target.value\n    })\n  }\n  \n  handleIPSrc(e) {\n    this.setState({\n      ipsrc: e.target.value\n    })\n  }\n\n  handleIPDest(e) {\n    this.setState({\n      ipdest: e.target.value\n    })\n  }\n\n  handleIPType(e) {\n    this.setState({\n      iptype: e.target.value\n    })\n  }\n\n  handleSRCPort(e) {\n    this.setState({\n      srcport: e.target.value\n    })\n  }\n\n  handleDestPort(e) {\n    this.setState({\n      destport: e.target.value\n    })\n  }\n\n  saveToDB = e => {\n    e.preventDefault();\n    const db = fire.firestore();\n    const userRef = db.collection(\"packets\").add({\n      dir: this.state.dir,\n      frametype: this.state.frametype,\n      ipsrc: this.state.ipsrc,\n      ipdest: this.state.ipdest,\n      iptype: this.state.iptype,\n      srcport: this.state.srcport,\n      destport: this.state.destport\n    })\n    this.retrieveFromDB()\n  }\n\n  populateDB = e => {\n    e.preventDefault();\n    const db = fire.firestore();\n    let initialPackets = [\n      {dir: \"in\", frametype: \"0x0800\", ipdest: \"192.5.48.1\", iptype: \"TCP\", destport: \"80\"},\n      {dir: \"in\", frametype: \"0x0800\", ipdest: \"192.5.48.2\", iptype: \"TCP\", destport: \"25\"},\n      {dir: \"in\", frametype: \"0x0800\", ipdest: \"192.5.48.3\", iptype: \"TCP\", destport: \"53\"},\n      {dir: \"in\", frametype: \"0x0800\", ipdest: \"192.5.48.3\", iptype: \"UDP\", destport: \"53\"},\n      {dir: \"out\", frametype: \"0x0800\", ipsrc: \"192.5.48.1\", iptype: \"TCP\", srcport: \"80\"},\n      {dir: \"out\", frametype: \"0x0800\", ipsrc: \"192.5.48.2\", iptype: \"TCP\", srcport: \"25\"},\n      {dir: \"out\", frametype: \"0x0800\", ipsrc: \"192.5.48.3\", iptype: \"TCP\", srcport: \"53\"},\n      {dir: \"out\", frametype: \"0x0800\", ipsrc: \"192.5.48.3\", iptype: \"UDP\", srcport: \"53\"},\n    ]\n    initialPackets.forEach(packet => {\n      let userRef = db.collection(\"packets\").add(packet)\n    })\n    this.retrieveFromDB()\n  }\n\n  componentDidMount() {\n    this.retrieveFromDB()\n  }\n\n  retrieveFromDB() {\n    const db = fire.firestore();\n    db.collection(\"packets\").get().then(data => {\n      const packets = []\n      data.forEach(doc => {\n        const data = doc.data();\n        packets.push(data)\n      })\n      this.setState({\n        packets: packets\n      })\n    })\n  }\n\n  deleteDB = e => {\n    e.preventDefault();\n    const db = fire.firestore();\n    db.collection(\"packets\").delete();\n    this.retrieveFromDB();\n  }\n\n  render() {\n    let dropdown = this.state.packets.map(value => <Dropdown.Item href=\"#/action-1\">{value.dir}</Dropdown.Item>)\n    let table = this.state.packets.map(packet =>\n        <tr>\n          <td>{packet.dir}</td>\n          <td>{packet.frametype}</td>\n          <td>{packet.ipsrc}</td>\n          <td>{packet.ipdest}</td>\n          <td>{packet.iptype}</td>\n          <td>{packet.srcport}</td>\n          <td>{packet.destport}</td>\n        </tr>)\n    let ipsrcComponent = this.state.dir == \"out\" ?\n        <Form.Group controlId=\"formBasicipsrc\">\n          <Form.Label>IP Src {this.state.ipsrc}</Form.Label>\n          <Form.Control type=\"text\" value={this.state.ipsrc} onChange={this.handleIPSrc} placeholder=\"IP Source\" />\n        </Form.Group> : null;\n\n    let ipdestComponent = this.state.dir == \"in\" ?\n        <Form.Group controlId=\"formBasicipdest\">\n          <Form.Label>IP Dest {this.state.ipdest}</Form.Label>\n          <Form.Control type=\"text\" value={this.state.ipdest} onChange={this.handleIPDest} placeholder=\"IP Destination\" />\n        </Form.Group> : null;\n\n      let srcportComponent = this.state.dir == \"out\" ?\n          <Form.Group controlId=\"formBasicsrcport\">\n            <Form.Label>Src Port {this.state.srcport}</Form.Label>\n            <Form.Control type=\"text\" value={this.state.srcport} onChange={this.handleSRCPort} placeholder=\"Source Port\" />\n          </Form.Group> : null;\n\n      let destportComponent = this.state.dir == \"in\" ?\n          <Form.Group controlId=\"formBasicdestport\">\n            <Form.Label>Dest Port {this.state.destport}</Form.Label>\n            <Form.Control type=\"text\" value={this.state.destport} onChange={this.handleDestPort} placeholder=\"Destination Port\" />\n          </Form.Group> : null;\n\n\n    return(\n        <Container>\n          <Row>\n            <Col>\n              <Button style={{margin: \"1em\"}} variant=\"success\" onClick={this.populateDB}>\n                Populate Database\n              </Button>\n              <Form className={\"form-data card-2\"}>\n                <Form.Group controlId=\"select\">\n                  <Form.Label>Dir</Form.Label>\n                  <Form.Control onChange={this.handleDir} as=\"select\">\n                    <option>in</option>\n                    <option>out</option>\n                  </Form.Control>\n                </Form.Group>\n\n                <Form.Group controlId=\"formBasicframetype\">\n                  <Form.Label>Frame Type{this.state.frametype}</Form.Label>\n                  <Form.Control type=\"text\" value={this.state.frametype} onChange={this.handleFrameType} placeholder=\"Frame Type\" />\n                </Form.Group>\n\n                {ipsrcComponent}\n\n                {ipdestComponent}\n\n                <Form.Group controlId=\"selectiptype\">\n                  <Form.Label>Ip Type</Form.Label>\n                  <Form.Control onChange={this.handleIPType} as=\"select\">\n                    <option>TCP</option>\n                    <option>UDP</option>\n                  </Form.Control>\n                </Form.Group>\n\n                {srcportComponent}\n\n                {destportComponent}\n                <Button variant=\"primary\" onClick={this.saveToDB}>\n                  Submit\n                </Button>\n              </Form>\n            </Col>\n            <Col>\n              <table>\n                <tr>\n                  <th>Dir</th>\n                  <th>Frame Type</th>\n                  <th>IP Src</th>\n                  <th>IP Dest</th>\n                  <th>IP Type</th>\n                  <th>Src Port</th>\n                  <th>Dest Port</th>\n                </tr>\n                {table}\n              </table>\n            </Col>\n          </Row>\n        </Container>\n    )\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}